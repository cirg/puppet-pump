#! /bin/bash
#
# Record boot and shutdown times to statsd
#

### BEGIN INIT INFO
# Provides:          boot_shutdown_report
# Required-Start:    $local_fs $remote_fs $syslog $network statsd
# Required-Stop:     $local_fs $remote_fs $syslog $network statsd
# Should-Start:      $time
# Should-Stop:       $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: report boot and shutdown times to statsd
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DISABLE=0
DESC="report boot and shutdown times to PUMP"
NAME=boot_shutdown_report
LOGFILE=/var/log/$NAME.log
DAEMON=/opt/pump/bin/$NAME
DAEMON_ARGS="--logfile $LOGFILE --verbosity 2"
PIDFILE=/var/run/$NAME.pid
MAXWAIT=30

if [ -r /etc/default/$NAME ]; then
	. /etc/default/$NAME
fi

if test "$DISABLE" != 0 -a "$1" == "start"; then
	logger -s "$NAME has been disabled - see /etc/default/$NAME."
	exit 0
fi

d_start() {
    logger $NAME start
    start-stop-daemon --start --quiet --oknodo -m --pidfile "$PIDFILE" \
	--background --exec $DAEMON -- $DAEMON_ARGS start
}

d_status() {
    logger $NAME status
    PID=$( cat "$PIDFILE" 2> /dev/null ) || true

    if test -n "$PID" && kill -0 $PID 2> /dev/null; then
        echo "$NAME ($PID) is running."
        exit 0
           else 
        PID=$( pidof $NAME ) || true

        if test -n "$PID"; then
            echo "$NAME ($PID) is running."
            exit 0
        else
            echo "$NAME is stopped."
        fi
    fi
    exit 1
}

still_running_warning="
WARNING: $NAME might still be running."

d_stop() {
    logger $NAME stop
    # don't expect to find it still running since boot
    PID=$( cat "$PIDFILE" 2> /dev/null ) || true
    if test -n "$PID" && kill -0 $PID 2> /dev/null; then
	echo "$still_running_warning" >&2
	start-stop-daemon --stop --quiet --oknodo --pidfile "$PIDFILE"
	sleep 1
    fi

    # start process with 'stop' positional arg - should be quick
    start-stop-daemon --start --quiet --oknodo -m --pidfile "$PIDFILE" \
	--background --exec $DAEMON -- $DAEMON_ARGS stop
    PID=$( cat "$PIDFILE" 2> /dev/null ) || true

    sleep 2
    # kill if 'stop' is still running
    start-stop-daemon --stop --quiet --oknodo --pidfile "$PIDFILE"

    if test -n "$PID" && kill -0 $PID 2> /dev/null; then
        i=0
        while kill -0 $PID 2> /dev/null; do
            i=$(( $i + 2 ))
            echo -n " ."

            if test $i -gt $MAXWAIT; then
                echo "$still_running_warning" >&2
                return 1
            fi

            sleep 2
        done
        return 0
    fi
}

case "$1" in
    start)
        echo -n "$DESC: $BOOTTAG"
        d_start
        echo "."
        ;;
    stop)
        echo -n "$DESC: $SHUTDOWNTAG"
        d_stop
        echo "."
        ;;
    status)
	d_status
	;;
    *)
        echo "Usage: $0 {start|stop|status}" >&2
        exit 1
        ;;
esac
exit 0
